{"version":3,"sources":["features/counter/todoSlice.js","component/Addtodo.js","component/Todo.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todosData","reducers","addTodo","state","action","payload","id","content","createdAt","push","memo","deleteTodo","filter","todo","actions","selectTodos","todos","Input","styled","input","Addtodo","useState","value","setValue","todoId","useRef","dispatch","useDispatch","str","d","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","time","onChange","e","target","placeholder","onClick","current","TodoWrapper","div","Memo","Address","CreateAt","Button","button","Todo","undefined","address","TodoListWrapper","App","useSelector","handleDelete","className","map","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d94ede6e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const todoSlice = createSlice({\r\n  name: 'todos',\r\n  initialState: {\r\n    todosData: [{\r\n    \"id\": 0,\r\n    \"createdAt\": 1605148012345,\r\n    \"memo\": \"Finish interview quiz\"\r\n  },\r\n  {\r\n    \"id\": 1,\r\n    \"createdAt\": 1605312012345,\r\n    \"memo\": \"Go k8s workshop at 10:00 trm\",\r\n    \"address\": \"Taipei 101\"\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"createdAt\": 1605657612345,\r\n    \"memo\": \"Follow up interview process\"\r\n  }\r\n],\r\n  },\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      const { id, content, createdAt } = action.payload\r\n      state.todosData.push({\r\n        id,\r\n        createdAt,\r\n        memo: content,\r\n      })\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      const id = action.payload\r\n      state.todosData = state.todosData.filter(todo => todo.id !== id)\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, deleteTodo } = todoSlice.actions;\r\n\r\nexport const selectTodos = state => state.todos.todosData;\r\n\r\nexport default todoSlice.reducer;\r\n","import React, { useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addTodo } from '../features/counter/todoSlice'\n\nconst Input = styled.input`\nmargin-top: 10px;\n`\nfunction time() {\n  let str = '';\n  const d = new Date();\n    str += d.getFullYear() + ' / ';  \n    str += d.getMonth() + 1 + ' / ';  \n    str += d.getDate() + ' / ';\n    str += d.getHours() + ' : ';\n    str += d.getMinutes() + ' : ';\n    str += d.getSeconds() + '';\n    return str;\n}\n\nfunction Addtodo() {\n  const [value, setValue] = useState('');\n  let todoId = useRef(3)\n  const dispatch = useDispatch()\n  const createdAt = time();\n\n  const handleAddTodo = () => {\n    if(value === '') return\n    dispatch(addTodo({id:todoId.current, content: value, createdAt, }))\n    setValue('')\n    todoId.current++\n  }\n\n  return (\n  <>\n    <Input value={value} onChange={(e) => {setValue(e.target.value)}} placeholder=\"type a new memo\"/>\n    <button onClick={handleAddTodo}>ADD</button>\n  </>\n  );\n}\n\nexport default Addtodo;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoWrapper = styled.div`\n  position: relative;\n  background: #acd6ff;\n  border: 1px solid black;\n  border-radius: 8px;\n  margin: 0px 40px;\n\n  & + & {\n    margin-top: 20px;\n  }\n`;\n\nconst Memo = styled.div`\n  font-size: 24px;\n  font-weight: bold;\n  padding-top: 15px;\n`\nconst Address = styled.div`\n  position: relative;\n  right: 8vw;\n  font-weight: bold;\n  margin-top: 10px;\n`\n\nconst CreateAt = styled.div`\n  position: relative;\n  left: 6vw;\n  overflow: wrap;\n`\n\nconst Button = styled.button`\n  position: absolute;\n  right: -10px;\n  top: -5px;\n  border-radius: 50%;\n  font-weight: bold;\n  font-size: 20px;\n  background: #FF9797;\n  border: 1px solid #FF0000;\n  cursor: pointer;\n`\n\nexport default function Todo({todo, deleteTodo}) {\n  return (\n    <TodoWrapper>\n      <Memo>{todo.memo}</Memo>\n      {todo.address !== undefined && (\n        <Address>{`Address: ${todo.address}`}</Address>\n      )}\n      <CreateAt>{`memo created at: ${todo.createdAt}`}</CreateAt>\n      <Button\n        onClick={() => {\n          deleteTodo(todo.id);\n        }}\n      >\n        X\n      </Button>\n    </TodoWrapper>\n  );\n}\n","import React from 'react';\r\nimport { useSelector, useDispatch} from 'react-redux';\r\nimport { selectTodos, deleteTodo } from './features/counter/todoSlice'\r\nimport styled from 'styled-components';\r\nimport Addtodo from './component/Addtodo';\r\nimport Todo from './component/Todo';\r\n\r\nconst TodoListWrapper = styled.div`\r\n  text-align: center;\r\n  background: rgba(255, 255, 0, 0.6);\r\n  width: 50vw;\r\n  margin: 0 auto;\r\n  border-radius: 50px;\r\n  padding: 20px 0px;\r\n`\r\n\r\nfunction App() {\r\n  const todos = useSelector(selectTodos)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleDelete = id => {\r\n    dispatch(deleteTodo(id))\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <TodoListWrapper>\r\n        {todos.map(todo => (\r\n          <Todo key={todo.id} todo={todo} deleteTodo={handleDelete}/>\r\n        ))}\r\n        <Addtodo />\r\n      </TodoListWrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport todoReducer from '../features/counter/todoSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    todos: todoReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}